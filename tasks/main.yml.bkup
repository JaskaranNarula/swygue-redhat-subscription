---
# tasks file for swygue-redhat-subscription
- name: check if system is already registered
  command: subscription-manager refresh
  register: is_system_registered
  failed_when: False
  changed_when: False

- name: declare system_registered true if status is registered
  set_fact:
    system_registered: "{{ true if is_system_registered.rc==0 else false }}"

- name: declare that system should be unregistered if rhsm_unregister is set
  set_fact:
    unregister_system: "{{ true if rhsm_unregister == true else false }}"

#TODO: this should be removed
- name: set rhsm_identity
  set_fact:
    consumer_id: "{{ true if rhsm_identity is defined and rhsm_identity|trim != '' else false }}"
  when: true if rhsm_identity is defined and rhsm_identity|trim != '' else false

- name: return rhsm ORG id if system is registered
  shell: subscription-manager identity| awk -F':' '/org ID/ {print $2}'|tr -d " \t\n\r"
  register: rhsm_org_id_check
  when: system_registered == true
  changed_when: False

#- debug:
#    msg: "Current ORG_ID is {{ rhsm_org_id_check.stdout }}"

#- debug:
#    msg: "Specified ORG_ID is {{ rhsm_org_id }}"

- name: declare org_id NUMBER if rhsm_org_id match systems current org id
  set_fact:
    org_id: "{{ true if rhsm_org_id|int == rhsm_org_id_check.stdout|int |
                true if rhsm_org_id == rhsm_org_id_check.stdout else false }}"
  when: system_registered == true and rhsm_enforce_reg_attri == true

#- name: declare org_id NAME if rhsm_org_id match systems current org id
#  set_fact:
#    org_id: "{{ true if rhsm_org_id == rhsm_org_id_check.stdout else false }}"
#  when: system_registered == true and rhsm_enforce_reg_attri == true

- name: check the system subscription status
  shell: subscription-manager status| awk -F':' '/Overall Status/ {print $2}'|tr -d " \t\n\r"
  register: rhsm_subscription_status
  changed_when: False
  when: system_registered == true

- name: delcare the system subscription status
  set_fact:
    subscription_status: "{{ true if rhsm_subscription_status.stdout == 'Current' else false }}"
  when: system_registered == true

- name: check if rhsm_pool_id was provided
  set_fact:
    poolid: "{{ True if rhsm_pool is defined and rhsm_pool|trim != '' else False }}"

- name: "verify current attached pool_id matches the one specified: {{ rhsm_pool }}"
  shell:
    subscription-manager list --consumed --pool-only | grep -o "{{ rhsm_pool }}"
  register: pool_is_attached
  changed_when: false
  ignore_errors: True
  when: (poolid and system_registered == true and verify_poolid == True)

- name: show pool_is_attached results
  debug:
    var: pool_is_attached
    verbosity: 1

- name: UNREGISTER|remove system rhsm registration if subscription is not current or rhsm ORG id does not match the systems current registered ORG id
  include_tasks: unregister.yml
  when: (unregister_system == true and system_registered == true) or
        ((unregister_system != true) and (system_registered == true and org_id != true))

- name: REGISTER|register system to RHSM when is not registered or has been unregistered
  include_tasks: register.yml
  when: (system_registered != true) and (unregister_system != true)

- name: ATTACH POOL| ensure system is attached to correct pool
  include_tasks: pools.yml
#  when: ((poolid == true and
  when: (pool_is_attached.rc is defined and pool_is_attached.rc != 0)
#  when: ( (poolid == true and system_registered == true) and
#          (pool_is_attached is defined and pool_is_attached.rc != 0)
#        )

- name: REPOS| enable system repositories
  include_tasks: repos.yml
#  when: (system_registered == true) and (unregister_system != true)
  when: system_registered == true
